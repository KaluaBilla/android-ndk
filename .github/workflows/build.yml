name: Build
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, x86, riscv64, armv7]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install common system dependencies
        run: |
          sudo apt update
          sudo apt --fix-broken install
          sudo apt install -y build-essential cmake ninja-build make \
            autoconf automake libtool pkg-config texinfo gettext gperf \
            bison flex git xz-utils unzip nasm yasm python3 python3-pip python3-venv
      
      - name: Install aarch64 toolchain
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      - name: Install x86 toolchain from multi-arch release
        if: matrix.arch == 'x86'
        run: |
          TOOLCHAIN_URL="https://github.com/KaluaBilla/multi-arch-toolchains/releases/download/toolchains-7/toolchain-x86.tar.gz"
          mkdir -p $HOME/i686-toolchain
          curl -L $TOOLCHAIN_URL | tar -xz -C $HOME/i686-toolchain

          # The extracted folder contains i686-nptl-linux-gnu
          TOOLCHAIN_DIR=$(find $HOME/i686-toolchain -type d -name "i686-nptl-linux-gnu" | head -n1)
          echo "$TOOLCHAIN_DIR/bin" >> $GITHUB_PATH
          export PATH="$TOOLCHAIN_DIR/bin:$PATH"

          # Verify
          i686-nptl-linux-gnu-gcc --version
          i686-nptl-linux-gnu-g++ --version
          
      
      - name: Install riscv64 toolchain
        if: matrix.arch == 'riscv64'
        run: |
          sudo apt install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu
      
      - name: Install armv7 toolchain
        if: matrix.arch == 'armv7'
        run: |
          sudo apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
      
      - name: Verify toolchain installation
        run: |
          echo "Verifying toolchain for ${{ matrix.arch }}..."
          case "${{ matrix.arch }}" in
            aarch64)
              TOOLCHAIN_PREFIX="aarch64-linux-gnu"
              ;;
            armv7)
              TOOLCHAIN_PREFIX="arm-linux-gnueabihf"
              ;;
            x86)
              TOOLCHAIN_PREFIX="i686-linux-gnu"
              ;;
            riscv64)
              TOOLCHAIN_PREFIX="riscv64-linux-gnu"
              ;;
          esac
          
          echo "Checking for ${TOOLCHAIN_PREFIX}-gcc..."
          which ${TOOLCHAIN_PREFIX}-gcc
          ${TOOLCHAIN_PREFIX}-gcc --version
          
          echo "Checking for ${TOOLCHAIN_PREFIX}-g++..."
          which ${TOOLCHAIN_PREFIX}-g++
          ${TOOLCHAIN_PREFIX}-g++ --version
      
      - name: Install pipx and Meson
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          export PATH="$HOME/.local/bin:$PATH"
          pipx install meson
      
      - name: Download Android NDK ZIP
        run: |
          NDK_VERSION="r29"
          NDK_ZIP="android-ndk-${NDK_VERSION}-linux.zip"
          curl -LO https://dl.google.com/android/repository/${NDK_ZIP}
          echo "ANDROID_NDK_ZIP=${{ github.workspace }}/${NDK_ZIP}" >> $GITHUB_ENV
          echo "ANDROID_NDK_VERSION=${NDK_VERSION}" >> $GITHUB_ENV
      
      - name: Set ARCH
        run: echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
      
      - name: Build LLVM
        env:
          ARCH: ${{ matrix.arch }}
        run: bash ${{ github.workspace }}/build.sh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ matrix.arch }}
          path: |
            ${{ github.workspace }}/*.xz
  
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Show collected files
        run: ls -R artifacts
      
      - name: Set build date
        run: echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV  
      
      - name: Create GitHub Release and upload ZIPs
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: android-ndk-build-gh-actions-run-${{ github.run_number }}
          name: "musl Build ${{ github.run_number }}"
          body: |
            musl build artifacts
            **Build Date:** ${{ env.BUILD_DATE }}
          files: artifacts/**/*.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
